CLASS BoxHat : Actor abstract
{
	Default
	{
		FloatBobPhase 0;
		RenderStyle "Translucent";
		SpriteAngle 180;
		+NOTONAUTOMAP;
		+NOBLOCKMAP;
		+NOINTERACTION;
		+SPRITEANGLE;
		+MASTERNOSEE;
	}
	
	abstract bool DoColor();
	double NewZSpot;
	
	override void Tick(void)
	{
		Super.Tick();
		
		if (master)
		{
			let ZSpotScale = master.Scale.Y * 1.10;
			if ((master is "PlayerPawn") && (master.player.crouching == -1)) {ZSpotScale *= 0.5;}
			let ZSpotA = master.Pos.Z + (master.default.Height * ZSpotScale);
			let ZSpotB = self.Pos.Z;
			
			if (ZSpotB <= ZSpotA) {NewZSpot = ZSpotA;}
			else {NewZSpot = (ZSpotA + (ZSpotB * 4)) / 5;}
			
			let ZSpeedy = ZSpotB - ZSpotA;
			if (ZSpeedy < -24) {Alpha = master.Alpha / 10;}
			else {Alpha = master.Alpha;}
			
			Vector3 sPos = (
				master.Pos.X,
				master.Pos.Y,
				NewZSpot
			); 
			SetOrigin(sPos, true);
			//Angle = master.Angle;
			Scale = master.Scale;
		}
		else {Destroy();}

		A_SetSize(1, 1);
	}
}

CLASS BoxHatPlayer : BoxHat
{
	Default
	{
		//+DONTTRANSLATE;
	}

	override bool DoColor() {return true;}
	//separated this code from the main BoxHat entity so that NPC hats don't need to load code they don't even use.
	int HatNumber;
	int HatRotation;
	string spritename;
	string spriteframe;
	string spriteangle;
	static const string alphabet[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "[", "]"}; //all characters you can use sprite frames for, excluding \.
	static const string rotations[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G"}; //all characters you can use for sprite rotations.
	
	void CheckInvalidHat (void) //switch current hat CVAR to default if current hat selected is invalid.
	{
		if (master)
		{
			cvar spawnhat = cvar.GetCVAR('box_hat_current', master.player); //full sprite name without file extension
			Array<String> BOXHAT_line, BOXHAT_sprite;
			int BOXHAT_size = 0;
			bool validhat = false;
		
			int ThisLump = Wads.FindLump("BOXHAT", 0, Wads.ANYNAMESPACE);
			int NextLump = Wads.FindLump("BOXHAT", ThisLump + 1, Wads.ANYNAMESPACE);
		
			while (ThisLump != -1)
			{
				Wads.ReadLump(ThisLump).Split(BOXHAT_line, "\n", TOK_SKIPEMPTY);
				ThisLump = NextLump;
				NextLump = Wads.FindLump("BOXHAT", ThisLump + 1, 1);
			}
		
			for (int i = 0; i < BOXHAT_line.Size(); i++)
			{
				string currentline = BOXHAT_line[i];
				int currentlength = currentline.Length();
				array<string> fixedline;
				array<string> splitline;
				if (currentline.Left(2) == ">>") {continue;} //dont bother reading the next lines of code if it's a comment (starts with ">>")
			
				if (currentline.Left(6) == "Hat = ")
				{
					currentlength += -1;
					currentline = currentline.Mid(6, currentlength);
				
					currentline.Split(fixedline, ";"); //this fixes that strange space that appears at the end of each line.
					fixedline[0].Split(splitline, ", ");
				
					BOXHAT_sprite.Push(splitline[3]);
				}
				else if (currentline.Left(9) == "Secret = ")
				{
					currentlength += -1;
					currentline = currentline.Mid(9, currentlength);
					
					currentline.Split(fixedline, ";"); //this fixes that strange space that appears at the end of each line.
					fixedline[0].Split(splitline, ", ");
	
					BOXHAT_sprite.Push(splitline[2]);
				}
			}
		
			BOXHAT_size = BOXHAT_sprite.Size();
			string spawnstring = spawnhat.GetString();
			
			string currentstring;
		
			for (int i = 0; i < BOXHAT_size; i++)
			{
				currentstring = BOXHAT_sprite[i].Left(6);
				if ((spawnstring == currentstring) || (spawnstring == "TNT1A0")) {validhat = true;}
			}
		
			if (validhat != true)
			{
				spawnhat.SetString("00HMA1");
			}
		}
		else 
		{
			Destroy();
		}
	}
	
	action void UpdateHatSprite(void)
	{
		if (master.health > 0)
		{
			cvar currenthat = cvar.GetCVAR("box_hat_current", master.player);
			string fullsprite = currenthat.GetString();
			invoker.spritename = fullsprite.Left(4);
			invoker.spriteframe = fullsprite.Mid(4, 1);
			invoker.spriteangle = fullsprite.Mid(5, 1);
		
			bool usingcolor = invoker.DoColor();
		
			UpdateHatColor(usingcolor);
		
			for (int i = 0; i < invoker.alphabet.Size(); i++) 
			{
				if (invoker.spriteframe == invoker.alphabet[i]) {invoker.HatNumber = i;}
			}
			
			for (int i = 0; i < invoker.rotations.Size(); i++) 
			{			
				if (invoker.spriteangle == invoker.rotations[i]) 
				{
					switch (i)
					{
						case 0: self.SpriteAngle = 180; break;
						case 1: self.SpriteAngle = 180; break;
						case 2: self.SpriteAngle = 225; break;
						case 3: self.SpriteAngle = 270; break;
						case 4: self.SpriteAngle = 315; break;
						case 5: self.SpriteAngle = 0; break;
						case 6: self.SpriteAngle = 45; break;
						case 7: self.SpriteAngle = 90; break;
						case 8: self.SpriteAngle = 135; break;
						case 9: self.SpriteAngle = 202.5; break;
						case 10: self.SpriteAngle = 247.5; break;
						case 11: self.SpriteAngle = 292.5; break;
						case 12: self.SpriteAngle = 337.5; break;
						case 13: self.SpriteAngle = 22.5; break;
						case 14: self.SpriteAngle = 67.5; break;
						case 15: self.SpriteAngle = 112.5; break;
						case 16: self.SpriteAngle = 157.5; break;
					}
					
					//console.printf("i is %d, angle is %f.", i, self.Angle);
				}
				//else console.printf("%s", "failed lmao");
			}
		}
	}
	
	action void UpdateHatColor(bool getcolor)
	{
		cvar enablecolor = cvar.GetCVAR("box_hat_color", master.player);
		
		if (enablecolor.GetBool() != getcolor)
		{
			invoker.spritename = "TNT1";
			invoker.HatNumber = "0";
		}
	}
	
	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();
		CheckInvalidHat();
	}

	override void Tick(void)
	{
		Super.Tick();
		
		if (master)
		{
			if (master.health <= 0)
			{
				bInvisible = true;
			}
			else {bInvisible = master.bInvisible;}
		}
		else {Destroy();}
	}
	
	States
	{
		Spawn:
			TNT1 A 5;
			Goto Looper;
		Looper:
			#### # 0 UpdateHatSprite();
			TNT1 A 10 {sprite = GetSpriteIndex(spritename); frame = HatNumber;}
			Loop;
	}
}

CLASS BoxHatPlayer2 : BoxHatPlayer
{
	Default
	{
		//each player has 2 hat actors attached to them. one is visible when hat colors are on, and vice versa.
		+DONTTRANSLATE;
	}
	
	override bool DoColor() {return false;}
}